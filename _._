// Licensed under the MIT License <http://opensource.org/licenses/MIT>.
// SPDX-License-Identifier: MIT
// Copyright (c) 2019 Victor Zverovich.
// Copyright (c) 2019 Daniil Goncharov <neargye@gmail.com>.
//
// Permission is hereby  granted, free of charge, to any  person obtaining a copy
// of this software and associated  documentation files (the "Software"), to deal
// in the Software  without restriction, including without  limitation the rights
// to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
// copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
// IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
// FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
// AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
// LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef ASSTREAM_H
#define ASSTREAM_H

#include <iostream>

namespace {

template <typename Char, typename Traits = std::char_traits<Char>>
struct basic_asstream {
  struct tag {
    void set_ostream(std::basic_ostream<Char, Traits>* os) { this->os = os; }

    void set_istream(std::basic_istream<Char, Traits>* is) { this->is = is; }

    // Push operator.
    template <typename T>
    std::basic_ostream<Char, Traits>& operator<<(const T& o) {
      if (os == nullptr) {
        throw std::ios_base::failure("not initialized");
      }

      *os << o;
      return *os;
    }

    // Pull operator.
    template <typename T>
    std::basic_istream<Char, Traits>& operator>>(T& o) {
      if (os == nullptr) {
        throw std::ios_base::failure("not initialized");
      }

      *is >> o;
      return *is;
    }

    tag& operator,(basic_asstream&) { return *this; }

   private:
    std::basic_ostream<Char, Traits>* os;
    std::basic_istream<Char, Traits>* is;
  };

  template<typename T>
  std::basic_istream<Char, Traits>& operator>>(T&&) {
    static_assert (![]{}, "You should use parentheses around a simple stream expression");
    std::terminate(); // Never called.
  };

  template<typename T>
  std::basic_ostream<Char, Traits>& operator<<(T&&) {
    static_assert (![]{}, "You should use parentheses around a simple stream expression");
    std::terminate(); // Never called.
  };

  tag& operator*(const basic_asstream&) { return as; }

 protected:
  tag as;
};

// A simple stream.
struct asstream final : basic_asstream<char> {
  tag& _;

  asstream() : _{as} {
    _.set_ostream(&std::cout);
    _.set_istream(&std::cin);
  }
} _;

// A simple stream which is also wide.
struct wide_asstream final : basic_asstream<wchar_t> {
  tag& __;

  wide_asstream() : __{as} {
    __.set_ostream(&std::wcout);
    __.set_istream(&std::wcin);
  }
} __;

} // namespace

#define _ _,_
#define __ __,__

#endif
